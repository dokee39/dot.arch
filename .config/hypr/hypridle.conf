general {
    # lock_cmd = notify-send "lock!"          # dbus/sysd lock command (loginctl lock-session) 
    # unlock_cmd = notify-send "unlock!"      # same as above, but unlock
    ignore_dbus_inhibit = false             # whether to ignore dbus-sent idle-inhibit requests (used by e.g. firefox or steam)
    lock_cmd = pidof hyprlock || hyprlock # avoid starting multiple hyprlock instances.
    before_sleep_cmd = loginctl lock-session    # lock before suspend.
    after_sleep_cmd = hyprctl dispatch dpms on  # to avoid having to press a key twice to turn on the display.
}

listener {
    timeout = 150
    on-timeout = brightnessctl -s set 1         # set monitor backlight to minimum, avoid 0 on OLED monitor.
    on-resume = brightnessctl -r                 # monitor backlight restore.
}

# turn off keyboard backlight, comment out this section if you dont have a keyboard backlight.
listener { 
    timeout = 150
    on-timeout = brightnessctl -sd asus::kbd_backlight set 0 # turn off keyboard backlight.
    on-resume = brightnessctl -rd asus::kbd_backlight        # turn on keyboard backlight.
}

# Screenlock
listener {
    timeout = 180
    on-timeout = hyprlock # command to run when timeout has passed
    # on-resume = notify-send "Welcome back to your desktop!"  # command to run when activity is detected after timeout has fired.
}


listener {
    timeout = 300
    on-timeout = loginctl lock-session            # lock screen when timeout has passed
}

listener {
    timeout = 330
    on-timeout = hyprctl dispatch dpms off        # screen off when timeout has passed
    on-resume = hyprctl dispatch dpms on && brightnessctl -r && brightnessctl -rd asus::kbd_backlight # screen on when activity is detected after timeout has fired.
}

# Suspend
listener {
    timeout = 360
    on-timeout = systemctl suspend # command to run when timeout has passed
    # on-resume = notify-send "Welcome back to your desktop!"  # command to run when activity is detected after timeout has fired.
}
